{{ '<?php' }}


namespace {{ event.namespace }}\Processor\Event;

use {{ event.abstract.namespace }};
use Codingbeard\Framework\Module\Service\Event\Message\CodingbeardServicePostOrderProcessEventMessage;

class {{ event.name }} extends {{ event.abstract.name }}

{
  /**
   * @devtoolsOverwritable
   *
   * @return string
   */
  public function getGroup()
  {
    return "{{ message.identifier.group }}";
  }

  /**
   * @devtoolsOverwritable
   *
   * @return string
   */
  public function getName()
  {
    return "{{ message.identifier.name }}";
  }

  /**
   * @devtoolsOverwritable
   *
   * @return CodingbeardServicePostOrderProcessEventMessage

   */
  public function getMessageClass()
  {
    return new CodingbeardServicePostOrderProcessEventMessage;
  }

  /**
   * This event will be called after the order has been processed and submitted to the billing provider.
   * It is no longer possible to prevent the user being charged for this service.
   *
   * @param CodingbeardServicePostOrderProcessEventMessage $message
   *
   * @return bool
   */
  public function process(CodingbeardServicePostOrderProcessEventMessage $message)
  {
    $this->log("Starting to process Event Message " . get_class($message));

    return true;
  }

}
