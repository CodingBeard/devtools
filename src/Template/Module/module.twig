{{ '<?php' }}


namespace {{ module.namespace }};

use {{ module.abstract.namespace }};
use {{ module.namespace }}\Container\{{ module.classPrefix }}DataContainer;
use {{ module.namespace }}\Container\{{ module.classPrefix }}HandlerContainer;
use {{ module.namespace }}\Container\{{ module.classPrefix }}ProcessorContainer;
use Codingbeard\Framework\Module\Module\Library\Setup\SetupHandlerInterface;

class {{ module.name }} extends {{ module.abstract.class }}

{
  /** @var {{ module.classPrefix }}DataContainer */
  protected $dataContainer;

  /** @var {{ module.classPrefix }}HandlerContainer */
  protected $handlerContainer;

  /** @var {{ module.classPrefix }}ProcessorContainer */
  protected $processorContainer;

  /**
   * @inheritdoc
   */
  public function init()
  {
    return true;
  }

  /**
   * @return string
   */
  public static function getName()
  {
    return '{{ module.classPrefix }}';
  }

  /**
   * @return {{ module.classPrefix }}DataContainer
   */
  public function getData()
  {
    if (!$this->dataContainer)
    {
      $this->dataContainer = (new {{ module.classPrefix }}DataContainer())
        ->setBeard($this->getBeard());
    }

    return $this->dataContainer;
  }

  /**
   * @return {{ module.classPrefix }}HandlerContainer
   */
  public function getHandler()
  {
    if (!$this->handlerContainer)
    {
      $this->handlerContainer = (new {{ module.classPrefix }}HandlerContainer())
        ->setBeard($this->getBeard());
    }

    return $this->handlerContainer;
  }

  /**
   * @return {{ module.classPrefix }}ProcessorContainer
   */
  public function getProcessor()
  {
    if (!$this->processorContainer)
    {
      $this->processorContainer = (new {{ module.classPrefix }}ProcessorContainer())
        ->setBeard($this->getBeard());
    }

    return $this->processorContainer;
  }

  /**
   * @return string[]
   */
  public function getCliProcessors()
  {
    return $this
      ->getProcessor()
      ->getProcessorSetupHandler()
      ->getProcessors();
  }

  /**
   * @return SetupHandlerInterface|bool
   */
  public function getSetupHandler()
  {
    return new {{ module.classPrefix }}SetupHandler();
  }
}
